{"version":3,"file":"timeago.formatter.d.ts","sources":["timeago.formatter.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { TimeagoIntl } from './timeago.intl';\nexport declare type Unit = 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year';\nexport declare type Suffix = 'ago' | 'from now';\nexport declare type StringOrFn = ((value: number, millisDelta: number) => string) | string;\nexport declare type NumberArray = [string, string, string, string, string, string, string, string, string, string];\nexport declare abstract class TimeagoFormatter {\n    abstract format(then: number): string;\n}\nexport declare class TimeagoDefaultFormatter extends TimeagoFormatter {\n    format(then: number): string;\n    private parse;\n}\nexport declare class TimeagoCustomFormatter extends TimeagoFormatter {\n    private intl;\n    constructor(intl: TimeagoIntl);\n    format(then: number): string;\n    private parse;\n    /**\n     * If the numbers array is present, format numbers with it,\n     * otherwise just cast the number to a string and return it\n    */\n    private normalizeNumber;\n    /**\n     * Take a string or a function that takes number of days and returns a string\n     * and provide a uniform API to create string parts\n    */\n    private normalizeFn;\n}\n"]}