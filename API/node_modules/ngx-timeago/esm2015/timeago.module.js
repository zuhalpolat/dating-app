import { NgModule } from '@angular/core';
import { TimeagoDirective } from './timeago.directive';
import { TimeagoPipe } from './timeago.pipe';
import { TimeagoClock, TimeagoDefaultClock } from './timeago.clock';
import { TimeagoFormatter, TimeagoDefaultFormatter } from './timeago.formatter';
export class TimeagoModule {
    /**
     * Use this method in your root module to provide the TimeagoModule
     */
    static forRoot(config = {}) {
        return {
            ngModule: TimeagoModule,
            providers: [
                config.clock || { provide: TimeagoClock, useClass: TimeagoDefaultClock },
                config.intl || [],
                config.formatter || { provide: TimeagoFormatter, useClass: TimeagoDefaultFormatter },
            ],
        };
    }
    /**
     * Use this method in your other (non root) modules to import the directive/pipe
     */
    static forChild(config = {}) {
        return {
            ngModule: TimeagoModule,
            providers: [
                config.clock || { provide: TimeagoClock, useClass: TimeagoDefaultClock },
                config.intl || [],
                config.formatter || { provide: TimeagoFormatter, useClass: TimeagoDefaultFormatter },
            ],
        };
    }
}
TimeagoModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    TimeagoDirective,
                    TimeagoPipe,
                ],
                exports: [
                    TimeagoDirective,
                    TimeagoPipe,
                ],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWFnby5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvc3JjL3RpbWVhZ28ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQWlDLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLG1CQUFtQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLHVCQUF1QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFrQmhGLE1BQU0sT0FBTyxhQUFhO0lBQ3hCOztPQUVHO0lBQ0gsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUE4QixFQUFFO1FBQzdDLE9BQU87WUFDTCxRQUFRLEVBQUUsYUFBYTtZQUN2QixTQUFTLEVBQUU7Z0JBQ1QsTUFBTSxDQUFDLEtBQUssSUFBSSxFQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLG1CQUFtQixFQUFDO2dCQUN0RSxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUU7Z0JBQ2pCLE1BQU0sQ0FBQyxTQUFTLElBQUksRUFBQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLHVCQUF1QixFQUFDO2FBQ25GO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBOEIsRUFBRTtRQUM5QyxPQUFPO1lBQ0wsUUFBUSxFQUFFLGFBQWE7WUFDdkIsU0FBUyxFQUFFO2dCQUNULE1BQU0sQ0FBQyxLQUFLLElBQUksRUFBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBQztnQkFDdEUsTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFO2dCQUNqQixNQUFNLENBQUMsU0FBUyxJQUFJLEVBQUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSx1QkFBdUIsRUFBQzthQUNuRjtTQUNGLENBQUM7SUFDSixDQUFDOzs7WUFyQ0YsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRTtvQkFDWixnQkFBZ0I7b0JBQ2hCLFdBQVc7aUJBQ1o7Z0JBQ0QsT0FBTyxFQUFFO29CQUNQLGdCQUFnQjtvQkFDaEIsV0FBVztpQkFDWjthQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUaW1lYWdvRGlyZWN0aXZlIH0gZnJvbSAnLi90aW1lYWdvLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBUaW1lYWdvUGlwZSB9IGZyb20gJy4vdGltZWFnby5waXBlJztcbmltcG9ydCB7IFRpbWVhZ29DbG9jaywgVGltZWFnb0RlZmF1bHRDbG9jayB9IGZyb20gJy4vdGltZWFnby5jbG9jayc7XG5pbXBvcnQgeyBUaW1lYWdvRm9ybWF0dGVyLCBUaW1lYWdvRGVmYXVsdEZvcm1hdHRlciB9IGZyb20gJy4vdGltZWFnby5mb3JtYXR0ZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRpbWVhZ29Nb2R1bGVDb25maWcge1xuICBjbG9jaz86IFByb3ZpZGVyO1xuICBpbnRsPzogUHJvdmlkZXI7XG4gIGZvcm1hdHRlcj86IFByb3ZpZGVyO1xufVxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBUaW1lYWdvRGlyZWN0aXZlLFxuICAgIFRpbWVhZ29QaXBlLFxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgVGltZWFnb0RpcmVjdGl2ZSxcbiAgICBUaW1lYWdvUGlwZSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVGltZWFnb01vZHVsZSB7XG4gIC8qKlxuICAgKiBVc2UgdGhpcyBtZXRob2QgaW4geW91ciByb290IG1vZHVsZSB0byBwcm92aWRlIHRoZSBUaW1lYWdvTW9kdWxlXG4gICAqL1xuICBzdGF0aWMgZm9yUm9vdChjb25maWc6IFRpbWVhZ29Nb2R1bGVDb25maWcgPSB7fSk6IE1vZHVsZVdpdGhQcm92aWRlcnM8VGltZWFnb01vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogVGltZWFnb01vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICBjb25maWcuY2xvY2sgfHwge3Byb3ZpZGU6IFRpbWVhZ29DbG9jaywgdXNlQ2xhc3M6IFRpbWVhZ29EZWZhdWx0Q2xvY2t9LFxuICAgICAgICBjb25maWcuaW50bCB8fCBbXSxcbiAgICAgICAgY29uZmlnLmZvcm1hdHRlciB8fCB7cHJvdmlkZTogVGltZWFnb0Zvcm1hdHRlciwgdXNlQ2xhc3M6IFRpbWVhZ29EZWZhdWx0Rm9ybWF0dGVyfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2UgdGhpcyBtZXRob2QgaW4geW91ciBvdGhlciAobm9uIHJvb3QpIG1vZHVsZXMgdG8gaW1wb3J0IHRoZSBkaXJlY3RpdmUvcGlwZVxuICAgKi9cbiAgc3RhdGljIGZvckNoaWxkKGNvbmZpZzogVGltZWFnb01vZHVsZUNvbmZpZyA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVyczxUaW1lYWdvTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBUaW1lYWdvTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIGNvbmZpZy5jbG9jayB8fCB7cHJvdmlkZTogVGltZWFnb0Nsb2NrLCB1c2VDbGFzczogVGltZWFnb0RlZmF1bHRDbG9ja30sXG4gICAgICAgIGNvbmZpZy5pbnRsIHx8IFtdLFxuICAgICAgICBjb25maWcuZm9ybWF0dGVyIHx8IHtwcm92aWRlOiBUaW1lYWdvRm9ybWF0dGVyLCB1c2VDbGFzczogVGltZWFnb0RlZmF1bHRGb3JtYXR0ZXJ9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG59XG4iXX0=